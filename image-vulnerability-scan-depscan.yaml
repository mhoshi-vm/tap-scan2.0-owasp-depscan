apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: image-vulnerability-scan-depscan
spec:
  healthRule:
    multiMatch:
      healthy:
        matchConditions:
        - status: "True"
          type: ScanCompleted
        - status: "True"
          type: Succeeded
      unhealthy:
        matchConditions:
        - status: "False"
          type: ScanCompleted
        - status: "False"
          type: Succeeded
  imagePath: .status.scannedImage
  lifecycle: immutable
  retentionPolicy:
    maxFailedRuns: 10
    maxSuccessfulRuns: 10
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:template", "template")
    
    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     exclusions = ["kapp.k14s.io/app", "kapp.k14s.io/association"]
    #@     for k,v in dict(data.values.workload.metadata.labels).items():
    #@       if k not in exclusions:
    #@         labels[k] = v
    #@       end
    #@     end
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end
    
    #@ def scanResultsLocation():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@      "scan-results",
    #@    ])
    #@   ]) + ":" + data.values.workload.metadata.uid
    #@ end
    
    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end
    
    #@ def maven_param(key):
    #@   if not key in data.values.params["maven"]:
    #@     return None
    #@   end
    #@   return data.values.params["maven"][key]
    #@ end
    
    #@ def maven_repository_url():
    #@   if maven_param("repository") and "url" in maven_param("repository"):
    #@     return maven_param("repository")["url"]
    #@   elif param("maven_repository_url"):
    #@     return param("maven_repository_url")
    #@   else:
    #@     return None
    #@   end
    #@ end
    
    #@ def correlationId():
    #@   if hasattr(data.values.workload, "annotations") and hasattr(data.values.workload.annotations, "apps.tanzu.vmware.com/correlationid"):
    #@     return data.values.workload.annotations["apps.tanzu.vmware.com/correlationid"]
    #@   end
    #@   url = ""
    #@   if hasattr(data.values.workload.spec, "source"):
    #@     if hasattr(data.values.workload.spec.source, "git"):
    #@       url = data.values.workload.spec.source.git.url
    #@     elif hasattr(data.values.workload.spec.source, "image"):
    #@       url = data.values.workload.spec.source.image.split("@")[0]
    #@     end
    #@     url = url + "?sub_path=" + getattr(data.values.workload.spec.source, "subPath", "/")
    #@   end
    #@   if param("maven"):
    #@     url = maven_repository_url() + "/" + maven_param("groupId").replace(".", "/") + "/" + maven_param("artifactId")
    #@   end
    #@   if hasattr(data.values.workload.spec, "image"):
    #@     url = data.values.workload.spec.image.split("@",1)[0]
    #@     url = url.split(":",1)[0]
    #@   end
    #@   return url
    #@ end
    
    ---
    apiVersion: app-scanning.apps.tanzu.vmware.com/v1alpha1
    kind: ImageVulnerabilityScan
    metadata:
      labels: #@ merge_labels({ "app.kubernetes.io/component": "image-scan" })
      annotations:
        apps.tanzu.vmware.com/correlationid: #@ correlationId()
        app-scanning.apps.tanzu.vmware.com/scanner-name: OWASP-depcan
      generateName: #@ data.values.workload.metadata.name + "-depscan-scan-"
    spec:
      image: #@ data.values.image
      scanResults:
        location: #@ scanResultsLocation()
      serviceAccountNames:
        publisher: default
        scanner: default
      workspace:
        size: 30Gi
      steps:
      - args:
        - -c
        - |
          set -x
          wget https://github.com/carvel-dev/vendir/releases/download/v0.40.0/vendir-linux-amd64
          chmod +x vendir-linux-amd64
          cat <<EOF > $TMPDIR/vendir.yml
          apiVersion: vendir.k14s.io/v1alpha1
          kind: Config
          directories:
          - path: vendor
            contents:
            - path: .
              image:
                url: "$(params.image)"
          EOF
          ./vendir-linux-amd64 sync --chdir $TMPDIR
        command:
        - /bin/sh
        image: index.docker.io/library/alpine@sha256:c5b1261d6d3e43071626931fc004f70149baeba2c8ec672bd4f27761f8e1ad6b
        name: extract
      - image: ghcr.io/owasp-dep-scan/dep-scan@sha256:09636ab4974929d524457e4f47ab161c8f660ea871a356e93e7fb7090b592cac
        name: depscan
        args: [ --debug, --src, /workspace/tmp/vendor, --reports-dir, $(params.scan-results-path) ]
        env:
        - name: VDB_HOME
          value: /workspace/vdb
      - args:
        - -c
        - |
          set -x
          ls $(params.scan-results-path)
          rm $(params.scan-results-path)/depscan*
          rm $(params.scan-results-path)/sbom-universal.json
          mv $(params.scan-results-path)/*.vdr.json $(params.scan-results-path)/scan.cdx.json
          ls $(params.scan-results-path)
        command:
        - /bin/sh
        image: index.docker.io/library/alpine@sha256:c5b1261d6d3e43071626931fc004f70149baeba2c8ec672bd4f27761f8e1ad6b
        name: cleanup
